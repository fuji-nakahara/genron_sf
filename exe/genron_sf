#!/usr/bin/env ruby
# frozen_string_literal: true

require 'net/http'
require 'optparse'
require 'genron_sf/ebook'

options = {
  type: 'subject',
  year: nil,
  id: nil,
  path: nil,
}

OptionParser.new do |opt_parser|
  opt_parser.on('-t', '--type TYPE', %w[subject student], 'subject or student') do |type|
    options[:type] = type
  end

  opt_parser.on('-y', '--year YEAR', /\A20(?:1[6-9]|[2-9][0-9])\z/, '2016-') do |year|
    options[:year] = year
  end

  opt_parser.on('-n', '--id ID', 'subject number or student id') do |year|
    options[:id] = year
  end

  opt_parser.on('-o', '--output PATH', './path/to/output.epub') do |output|
    options[:path] = output
  end
end.parse!

begin
  options[:year] = GenronSF::Term.latest.year if options[:year].nil?

  case options[:type]
  when 'subject'
    options[:id] = GenronSF::Subject.list(year: options[:year]).to_a.last.number if options[:id].nil?
    GenronSF::EBook.generate_subject(year: options[:year], number: options[:id], path: options[:path])
  when 'student'
    abort 'Specify `--id` option' if options[:id].nil?
    GenronSF::EBook.generate_student(year: options[:year], id: options[:id], path: options[:path])
  end
rescue GenronSF::HTTPError => e
  abort e.message
end
